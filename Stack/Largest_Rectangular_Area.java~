package Stack;

import java.util.Stack;

public class Largest_Rectangular_Area {

    static int getMaxArea(int arr[],int n){

        Stack<Integer> s = new Stack<>();

        int res=0;
        int tp;
        int curr;

        for(int i=0;i<n ;i++){

            while (s.isEmpty()==false && (arr[s.peek()]>= arr[i])) {
                tp =s.peek();
                s.pop();

                curr = arr[tp]*(s.isEmpty() ? i : i-s.peek()-1);

                res= Math.max(curr, res);
                
            }

           s.add(i);
        }

        while (s.isEmpty() == false) {
            tp= s.peek();
            s.pop();
            curr= arr[tp]*(s.isEmpty() ? n : n-s.peek()-1);
            
            res= Math.max(curr, res);
        }

        return res;
    }

    public static int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;

        for (int i = 0; i <= n; i++) {
            int currentHeight = (i == n) ? 0 : heights[i];

            while (!stack.isEmpty() && currentHeight < heights[stack.peek()]) {
                int height = heights[stack.pop()];
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }

            stack.push(i);
        }

        return maxArea;
    }
    
    public static void main (String[] args) {
	
	    int[] arr=new int[]{6,2,5,4,1,5,6};
        
        System.out.print("Maximum Area: "+getMaxArea(arr,arr.length));
        System.out.print("Maximum Area: "+largestRectangleArea(arr));

    }

}
